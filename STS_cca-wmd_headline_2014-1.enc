{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyemd import emd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from gensim.models import KeyedVectors\n",
    "from sklearn.cross_decomposition import CCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "vecfile = 'GoogleNews-vectors-negative300.bin.gz'\n",
    "vecs = KeyedVectors.load_word2vec_format(vecfile, binary =True)\n",
    "vecs.init_sims(replace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\mailt\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\mailt\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('punkt')\n",
    "nltk.download('stopwords')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import inflect\n",
    "import re\n",
    "from nltk.corpus import stopwords\n",
    "from scipy.stats import pearsonr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def remove_punctuation(words):\n",
    "    new_words = []\n",
    "    for word in words:\n",
    "        new_word = re.sub(r'[^\\w\\s]', '', word)\n",
    "        if new_word != '':\n",
    "           new_words.append(new_word)\n",
    "    return new_words\n",
    "                    \n",
    "def replace_numbers(words):\n",
    "    p = inflect.engine()\n",
    "    new_words =[]\n",
    "    for word in words:\n",
    "        if word.isdigit():\n",
    "            new_word = p.number_to_words(word)\n",
    "            new_words.append(new_word)\n",
    "        else:\n",
    "            new_words.append(word)\n",
    "    return new_words        \n",
    "                                                    \n",
    "def remove_stopwords(words):\n",
    "    new_words = []\n",
    "    for word in words:\n",
    "        if word not in stopwords.words('english'):\n",
    "            new_words.append(word)\n",
    "    return new_words  \n",
    "                          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalize(words):\n",
    "    words = remove_punctuation(words)\n",
    "    words = replace_numbers(words)\n",
    "    words = remove_stopwords(words)\n",
    "    return words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_cosine_similarity(vector1, vector2):\n",
    "    \n",
    "    \n",
    "    cos=vector1.dot(vector2)/(np.linalg.norm(vector1, ord=2) * np.linalg.norm(vector2, ord=2))\n",
    "    \n",
    "    if np.isnan(cos):\n",
    "        return 0.500 # arbitrarily low similarity\n",
    "    else:\n",
    "        return cos\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cca_semantic(inpu, vecs, output):\n",
    "    \n",
    "    \n",
    "    write_str  = []\n",
    "    \n",
    "    wmd_dis = []\n",
    "   \n",
    "    original_value=[]\n",
    "    \n",
    "    \n",
    "    for line in inpu:\n",
    "        line_components = line.split(\"\\t\")\n",
    "        sent1 = line_components[1]\n",
    "        sent2 = line_components[2]\n",
    "        original_value.append(line_components[0])\n",
    "        \n",
    "        \n",
    "        words_in_sent1 = normalize(sent1.split())\n",
    "        words_in_sent2 = normalize(sent2.split())\n",
    "        \n",
    "        stems1 = []\n",
    "        for word in words_in_sent1:\n",
    "            if word in vecs:\n",
    "                stems1.append(word)\n",
    "                \n",
    "        stems2 = []\n",
    "        for word in words_in_sent2:\n",
    "            if word in vecs:\n",
    "                stems2.append(word)\n",
    "        \n",
    "        \n",
    "        \n",
    "        len_1 = len(stems1)\n",
    "        len_2 = len(stems2)\n",
    "        len_min = min(len_1, len_2, 5)\n",
    "        \n",
    "        \n",
    "        if len_min == 1:\n",
    "            write_str.append(sent1 + \"\\t\" + '(' + \"  \" + ')' + \"\\t\" + sent2 +  \"\\t\" +  '(' + \"  \" + ')' + \"\\t\" + str(0.500) + \"\\n\")  \n",
    "            wmd_dis.append(0.500)\n",
    "            continue\n",
    "        \n",
    "        \n",
    "        \n",
    "        v1 = np.asarray(vecs[\"hi\"])\n",
    "        v2 = np.asarray(vecs[\"hi\"])\n",
    "        \n",
    "        for word in stems1:\n",
    "            x = np.asarray(vecs[word]) \n",
    "            v1 = np.vstack((v1, x))\n",
    "        for word in stems2:\n",
    "            x = np.asarray(vecs[word]) \n",
    "            v2 = np.vstack((v2, x))\n",
    "          \n",
    "          \n",
    "        v1 = np.delete(v1, 0, 0)\n",
    "        v2 = np.delete(v2, 0, 0)\n",
    "       \n",
    "        \n",
    "        b = len_min    \n",
    "            \n",
    "        cca = CCA(n_components =b)\n",
    "            \n",
    "        cca.fit(v1.T, v2.T)\n",
    "        X_c, Y_c = cca.transform(v1.T, v2.T)\n",
    "        \n",
    "        X_T = X_c.T\n",
    "        Y_T = Y_c.T\n",
    "        \n",
    "        \n",
    "        \n",
    "        write_str1 = []\n",
    "        write_str2 = []\n",
    "        s = \"\"\n",
    "        t = \"\"\n",
    "        \n",
    "        for i in range(b):\n",
    "            \n",
    "            \n",
    "            \n",
    "            #vector 1\n",
    "            v1 = []\n",
    "            v1 = X_T[i]   \n",
    "                \n",
    "            \n",
    "            con11 = vecs.most_similar(positive = [v1], topn =1)\n",
    "            context11 = con11[0][0]\n",
    "            \n",
    "            #vector 2\n",
    "            v2 = []\n",
    "            v2 = Y_T[i]\n",
    "        \n",
    "            con21 = vecs.most_similar(positive = [v2], topn =1)\n",
    "            context21 = con21[0][0]\n",
    "            \n",
    "            \n",
    "            \n",
    "            write_str1.append(context11)\n",
    "            write_str2.append(context21)\n",
    "            \n",
    "        \n",
    "        \n",
    "        \n",
    "        for i in write_str1:\n",
    "            s += i \n",
    "            s += \", \"\n",
    "        \n",
    "        for i in write_str2:\n",
    "            t += i \n",
    "            t += \", \"\n",
    "            \n",
    "        wmd_distance = vecs.wmdistance(write_str1, write_str2)\n",
    "        wmd_dis.append(5-wmd_distance)\n",
    "        \n",
    "        \n",
    "        write_str.append(sent1 + \"\\t\" + '(' + s + ')' + \"\\t\" + sent2 +  \"\\t\" +  '(' + t + ')' + \"\\t\" + str(5-wmd_distance) + \"\\n\")        \n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "    \n",
    "    for i in range(0,len(write_str)):\n",
    "        output.write(write_str[i])\n",
    "        wmd_dis[i]   =  float(wmd_dis[i])\n",
    "        original_value[i] = float(original_value[i])\n",
    "        \n",
    "    covariance = pearsonr(wmd_dis,original_value)\n",
    "    print(covariance)    \n",
    "        \n",
    "        \n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0.5580414331826835, 1.3006358086296883e-62)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "with open(\"headlines_2014.test.txt\", 'r') as inputfile:\n",
    "    inpu = inputfile.readlines()\n",
    "\n",
    "output_cca = open(\"pred_headlines_2014wmd.txt\", 'w')\n",
    "\n",
    "cca_semantic(inpu, vecs, output_cca)\n",
    "\n",
    "output_cca.close()\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
